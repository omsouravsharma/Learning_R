v2 <- c("TRUE" + 1)
?attitude
attitude
library(psych)
attitude_fa <- fa(attitude, nfactors = 2, rotate = "oblimin", fm= "ml")
attitude_fa <- fa(attitude, nfactors = 2, rotate = "oblimin", fm= "ml")
attitude_fa # result
fa.diagram(attitude_fa, simple = FALSE)
attitude_fa <- fa(attitude, nfactors = 2, rotate = "varimax", fm = "ml")
fa.diagram(attitude_fa, simple = FALSE)
attitude_fa <- fa(attitude, nfactors = 2, rotate = "oblimin", fm = "miners")
fa.diagram(attitude_fa, simple = FALSE)
scree(attitude, pc = FALSE)
fa.parallel(attitude, fm = "ml", fa = "fa")
fa.parallel(attitude, fm = "ml", fa = "fa")
as.logical("FALSE")
as.numeric(TRUE)
as.numeric("2.014")
as.character(2.254)
as.character(TRUE)
as.numeric("two")
as.numeric("1+1")
my_list <- list(my_number = c(2,6,22,1),
my_data = data.frame(a = 1:3, b = 4:6),
my_text = "list are the best")
my_list
View(my_list)
View(my_list)
my_list$my_data
my_list[[2]]
my_list[[3]]
my_list[[2]]
my_list[[2]][1]
my_list[[2]][2]
temp_may = airquality$Temp[airquality$Month ==5]
temp_may
temps <- split(airquality$Temp, airquality$Month)
temps
View(temps)
View(temps)
names(temps)<- c("May", "June", "July", "August", "September")
temps
# Collapsing list into vector
unlist(temps)
a <- c(2.554, 2.523, 6.32,4.24 )
round(a, 2)
signif(a,3)
ceiling(a)
floor(a)
trunc(a)
bookstore <- data.frame(purchase1 = c(20,29,2,12,22,160, 34,34,29),
purchase2 = c(14,67,9,20,20,81,19,55,8),
purchase3 = c(4,62,1,,18,33,57,24,49,29))
bookstore <- data.frame(purchase1 = c(20,29,2,12,22,160, 34,34,29),
purchase2 = c(14,67,9,20,20,81,19,55,8),
purchase3 = c(4,62,11,18,33,57,24,49,29))
bookstore
colSums(bookstore)
rowsum(bookstore)
rowSums(bookstore)
colMeans(bookstore)
rowMeans(bookstore)
library(fpp2)
a10
a10[7:18]
cumsum(a10[7:18])
cummax(a10[7:18])
cummin(a10[7:18])
plot(1:12, cumsum(a10[7:18]))
plot(1:12, cumsum(a10[7:18]),
xlab = "Month",
ylab = "Totoal Sales",
type = "b")
format(7000000, scientific = FALSE)
format(7000000, scientific = TRUE)
option(scipen = 1000)
options(scipen = 1000)
options(scipen = 1000)
options(scipen = 0)
1/3
1.5-0.2 == 1.3
1.1-0.2 == 0.9
sprintf("%.30f", 1.1-0.2)
sprintf("%.30f", 1.1-0.2)
sprintf("%.30f", 1.5-0.2)
sprintf("%.30f", 1.3)
all.equal(1.1-0.2, 0.9)
all.equal(1,2)
isTURE(all.equal(1,2))
isTRUE(all.equal(1,2))
?all.equal
smoke <- c("Never", "Never","Heavy","Never" ,"Occassionaly",
"Never", "Never", "Regularly", "Regularly", "No")
table(smoke)
# Creating factor
smoke2 <- factor(smoke)
smoke2
level(smoke2)
levels(smoke2)
smoke2 <- factor(smoke, levels = c("Never", "Occassionally", "Regularly", "Heavy"), ordered = T)
smoke2
levels(smoke2)
table(smoke2)
smoke[which(is.na(smoke2))]
smoke <- c("Never", "Never","Heavy","Never" ,"Occassionally",
"Never", "Never", "Regularly", "Regularly", "No")
table(smoke)
# Creating factor
smoke2 <- factor(smoke)
# Creating factor
smoke2 <- factor(smoke)
smoke2
levels(smoke2)
smoke2 <- factor(smoke, levels = c("Never", "Occassionally", "Regularly", "Heavy"), ordered = T)
smoke2
levels(smoke2)
table(smoke2)
smoke[which(is.na(smoke2))]
smoke2 <- addNA(smoke2)
smoke2
levels(smoke2)[5]<- "Invalid answer"
levels(smoke2)[1:3] <= "Yes"
levels(smoke2)
levels(smoke2)[1:3] <= "Yes"
levels(smoke2)
smoke2
levels(smoke2)[1:3] <- "Yes"
levels(smoke2)
smoke2
smoke2 <- factor(smoke, levels = c("Never", "Occassionally", "Regularly", "Heavy"), ordered = T)
smoke2
levels(smoke2)
table(smoke2)
smoke[which(is.na(smoke2))]
smoke[which(is.na(smoke2))]
smoke2 <- addNA(smoke2)
smoke2
levels(smoke2)[2:4] <- "Yes"
levels(smoke2)
text1 <- "An example of string. Isn't this is great"
text1
text2 <- 'An example of so called "string"'
text2
text3 <- "Text..\n\tWith indented text on a new line!"
text3
cat(text3)
first <- "This is first"
second <- "and this is end"
cat(first, second)
cat(first, second, sep = "\n")
toupper(my_string)
my_string <- "SOMETIMES I SCREAM (and sometime I whisper)"
toupper(my_string)
tolower(my_string)
as.Date("2020-04-01")
as.Date("2020-04-01", format = "%y-%m-%d")
as.Date("2020-04-01", format = "%Y-%m-%d")
as.Date("2020-04-01", format = "%m%d%y")
as.Date("2020-04-01", format = "%m-%d-%y")
as.Date("4-1-20", format = "%m-%d-%y")
Sys.getlocale("LC_TIME")
dates <- as.Date(c("2020-04-01", "2021-12-21", "2023-09-22"), format = "%Y-%m-%d")
# Extract day of the month
strftime(dates, format = "%d")
# Extract month of the date
strftime(dates, format = "%m")
# Extract year of the date
strftime(dates, format = "%y")
# Extract year of the date
strftime(dates, format = "%Y")
# Plotting with dates
library(plotly)
library(fpp2)
myplot<- autoplot(elecdaily[, "Demand"])
ggplot(myplot)
ggplotly(myplot)
elecdaily2 <- as.data.frame(elecdaily)
elecdaily2$Date <- seq.Date(as.Date("2014-01-01"), as.Date("2014-12-31"), by = "day")
myplot <- autoplot(elecdaily2,aes(Date, Demand))+
geom_line()
ggplotly(myplot)
myplot <- autoplot(elecdaily2,aes(Date, Demand))+
geom_line()
myplot <- ggplot(elecdaily2,aes(Date, Demand))+
geom_line()
ggplotly(myplot)
install.packages(c("dplyr", "tidyr", "data.table"))
install.packages(c("dplyr", "tidyr", "data.table"))
install.packages(c("dplyr", "tidyr", "data.table"))
install.packages(c("dplyr", "tidyr", "data.table"))
install.packages(c("dplyr", "tidyr", "data.table"))
install.packages(c("dplyr", "tidyr", "data.table"))
install.packages(c("dplyr", "tidyr", "data.table"))
install.packages(c("dplyr", "tidyr", "data.table"))
library(dplyr)
# Syntax basic
# [i = row, j = column, by = groups]
library(data.table)
library(dplyr)
aq <- as.data.table(airquality)
aq[, wind:=wind*0.44704]
aq[, Wind:=Wind*0.44704]
aq%>% mutate(Wind = Wind*0.44704) -> aq
aq
airquality
aq %>%
mutate(Hot = Temp>90)-> 90
aq %>%
mutate(Hot = Temp>90)-> aq
aq
# Renaming a variable
aq %>%
rename(HotDay  = Hot) ->
# Renaming a variable
aq %>%
rename(HotDay  = Hot) ->
aq
# Renaming a variable
aq %>%
rename(Hot  = HotDay) ->
a
# Renaming a variable
aq %>%
rename(HotDay  = Hot) ->aq
aq
# Syntax basic
# [i = row, j = column, by = groups]
library(data.table)
library(dplyr)
aq <- as.data.table(airquality)
aq[, Wind:=Wind*0.44704]
aq %>%
mutate(Hot = Temp>90)-> aq
aq
# Renaming a variable
aq %>%
rename(HotDay  = Hot) ->aq
aq
# Removing a variable.
aq
# Removing a variable.
aq[, HotDay:=NULL]
aq %>%
select(-Month, -Day) ->aq
aq
smoke2 <- factor(smoke, levels = c("Never", "Occasionally", "Regularly", "Heavy"), ordered = T)
smoke <- c("Never", "Never","Heavy","Never" ,"Occassionally",
"Never", "Never", "Regularly", "Regularly", "No")
smoke2 <- factor(smoke, levels = c("Never", "Occasionally", "Regularly", "Heavy"), ordered = T)
# change name
'new_names = c("Nvr", "Occ", "Reg", "Hvy")
# change name
new_names = c("Nvr", "Occ", "Reg", "Hvy")
smoke3[.(smoke2 = level(smoke2), to = new_names), on = "smoke2", smoke2:=i.to]
# change name
new_names = c("Nvr", "Occ", "Reg", "Hvy")
# change name
new_names = c("Nvr", "Occ", "Reg", "Hvy")
smoke3[.(smoke2 = level(smoke2), to = new_names), on = "smoke2", smoke2:=i.to]
smoke3 %>%
mutate(smoke2 = recode(smoke2,
"Never" = "Nvr",
"Occassionally" = "Occ",
"Regularly" = "Reg",
"Heavy" = "Hvy"))
# Syntax basic
# [i = row, j = column, by = groups]
library(data.table)
library(dplyr)
smoke3 %>%
mutate(smoke2 = recode(smoke2,
"Never" = "Nvr",
"Occassionally" = "Occ",
"Regularly" = "Reg",
"Heavy" = "Hvy"))
smoke3 <-data.table(smoke2)
smoke3 %>%
mutate(smoke2 = recode(smoke2,
"Never" = "Nvr",
"Occassionally" = "Occ",
"Regularly" = "Reg",
"Heavy" = "Hvy"))
smoke3
aq <-  data.table(airquality)
aq[, mean(Ozone), Month]
summarise(meanTemp = mean(Ozone))
aq %>%
aq %>%>
aq %>%
aq %>%
group_by(Month)%>%
summarise(meanTemp = mean(Ozone))
aq %>%
group_by(Month)%>%
summarise(meanTemp = mean(Ozone))
aq[, .(meanTemp = mean(Temp),
aq %>% group_by(Month) %>%
cor = cor(Temp, Wind)),
aq[, (meanTemp = mean(Temp),
TRUE + 5
v1 <- c(TRUE + 5)
v1
class(v1)
v2 <- c("TRUE" + 1) # ERROR
as.logical("FALSE")
as.numeric(TRUE)
as.numeric("2.014")
as.character(2.254)
as.character(TRUE)
# Fail
as.numeric("two")
as.numeric("1+1")
my_list <- list(my_number = c(2,6,22,1),
my_data = data.frame(a = 1:3, b = 4:6),
my_text = "list are the best")
my_list
# Access the elements
my_list$my_data
my_list[[3]]
my_list[[2]][2]
# One way
temp_may = airquality$Temp[airquality$Month ==5]
temp_may
# Better way
temps <- split(airquality$Temp, airquality$Month)
temps
names(temps)<- c("May", "June", "July", "August", "September")
temps
# Collapsing list into vector
unlist(temps)
a <- c(2.554, 2.523, 6.32,4.24 )
round(a, 2)
signif(a,3)
ceiling(a)
floor(a)
trunc(a)
bookstore <- data.frame(purchase1 = c(20,29,2,12,22,160, 34,34,29),
purchase2 = c(14,67,9,20,20,81,19,55,8),
purchase3 = c(4,62,11,18,33,57,24,49,29))
bookstore
colSums(bookstore)
rowSums(bookstore)
colMeans(bookstore)
rowMeans(bookstore)
library(fpp2)
a10
a10[7:18] # sales of 1992
cumsum(a10[7:18])
cummax(a10[7:18])
cummin(a10[7:18])
cummin(a10[7:18])
plot(1:12, cumsum(a10[7:18]),
xlab = "Month",
ylab = "Totoal Sales",
type = "b")
format(7000000, scientific = FALSE)
format(7000000, scientific = TRUE)
1/3
1.5-0.2 == 1.3
1.1-0.2 == 0.9
sprintf("%.30f", 1.1-0.2)
sprintf("%.30f", 1.5-0.2)
sprintf("%.30f", 1.3)
all.equal(1.1-0.2, 0.9) # near equality
all.equal(1,2)
isTRUE(all.equal(1,2))
?all.equal
smoke <- c("Never", "Never","Heavy","Never" ,"Occassionally",
"Never", "Never", "Regularly", "Regularly", "No")
table(smoke)
# Creating factor
smoke2 <- factor(smoke)
smoke2
levels(smoke2)
smoke2 <- factor(smoke, levels = c("Never", "Occassionally", "Regularly", "Heavy"), ordered = T)
smoke2
levels(smoke2)
table(smoke2)
smoke[which(is.na(smoke2))]
smoke2 <- addNA(smoke2)
smoke2
levels(smoke2)[5]<- "Invalid answer"
levels(smoke2)[2:4] <- "Yes"
levels(smoke2)
smoke2
text1 <- "An example of string. Isn't this is great"
text1
text2 <- 'An example of so called "string"'
text2
text3 <- "Text..\n\tWith indented text on a new line!"
text3
cat(text3)
first <- "This is first"
second <- "and this is end"
cat(first, second)
cat(first, second, sep = "\n")
my_string <- "SOMETIMES I SCREAM (and sometime I whisper)"
toupper(my_string)
tolower(my_string)
as.Date("2020-04-01")
as.Date("2020-04-01", format = "%Y-%m-%d")
as.Date("4-1-20", format = "%m-%d-%y")
# To find which language is in your locale
Sys.getlocale("LC_TIME")
dates <- as.Date(c("2020-04-01", "2021-12-21", "2023-09-22"), format = "%Y-%m-%d")
# Extract day of the date
strftime(dates, format = "%d")
# Extract month of the date
strftime(dates, format = "%m")
# Extract year of the date
strftime(dates, format = "%Y")
# Plotting with dates
library(plotly)
library(fpp2)
myplot<- autoplot(elecdaily[, "Demand"])
ggplotly(myplot) # Dates looks odd
# Plotting with dates
library(plotly)
myplot<- autoplot(elecdaily[, "Demand"])
ggplotly(myplot) # Dates looks odd
# Plotting with dates
library(plotly)
# Plotting with dates
library(plotly)
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "broom", "cli", "colorspace", "data.table", "dbplyr", "dplyr", "evaluate", "extrafont", "fansi", "fma", "forcats", "fs", "gargle", "gdtools", "ggplot2", "ggpubr", "ggrepel", "Hmisc", "htmlwidgets", "knitr", "lubridate", "markdown", "nlme", "openxlsx", "pbkrtest", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "rstatix", "Rttf2pt1", "sass", "stringi", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
# Plotting with dates
library(plotly)
# Plotting with dates
library(ggplot2)
library(plotly)
remove.packages(plotly)
remove.packages("plotly")
install.packages("plotly")
library(plotly)
install.packages("plotly", dependencies = T)
source("C:/Users/NEXT/Desktop/Learning_R/Tutorials/Tutorial-16/Tutorial-16.R", echo=TRUE)
library(plotly)
setwd("C:/Users/NEXT/Desktop/Learning_R")
# Importing Daily Stock Price Data.
library(quantmod)
?getSymbols
data = getSymbols(TCS.NS='yahoo')
data = getSymbols('TCS.NS')
data
data = getSymbols('TCS.NS', na.omit())
data = getSymbols('TCS.NS')
TCS = read.csv("C:/Users/NEXT/Desktop/Learning_R/Data/TCS.NS.csv", header = TRUE)
TCS
View(TCS)
# Import Data
data = read.csv("C:/Users/NEXT/Desktop/Learning_R/Data/TCS.NS.csv", header = TRUE)
View(data) # View Data
# Convert the date variable from Factor to a Date
class(data.data$Date)
# Convert the date variable from Factor to a Date
class(data$Date)
date <-as.Date(data$Date, format = "%Y-%m-%d")
date
head(data'')
head(data)
# Convert the date variable from Character to a Date
class(data$Date)
class(date)
data$date <-as.Date(data$Date, format = "%Y-%m-%d")
View(data) # View Data
# Convert the date variable from Character to a Date
class(data$Date)
data$Date <-as.Date(data$Date, format = "%Y-%m-%d")
# Convert the date variable from Character to a Date
class(data$Date)
class(date)
View(data) # View Data
# Import Data
data = read.csv("C:/Users/NEXT/Desktop/Learning_R/Data/TCS.NS.csv", header = TRUE)
View(data) # View Data
# Convert the date variable from Character to a Date
class(data$Date)
data$Date <-as.Date(data$Date, format = "%Y-%m-%d")
head(data)
class(date)
class(data$Date)
plot(data)
plot(data$Close)
plot(data$Close, x = data$Date)
