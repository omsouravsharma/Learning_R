?cor
abs(0.2)
sqrt(3)
log(2)
2^3
exp(2)
sin(2)
sum(2,4,6,22)
prod(3,5)
pi
10%%3
factorial(5)
?choose
choose(16, 4)
sqrt(-1)
1/0
0/0
# Command to remove the Global Environment
rm(list = ls())
?install.packages
?install.packages
install.packages("ggplot2")
library(ggplot2)
require(ggplot2)
ggplot(data = msleep,
aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight") +
ylab("Total sleep time")
Lirary(ggplot2)
Library(ggplot2)
library(ggplot2)
ggplot(data = msleep,
aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight") +
ylab("Total sleep time")
ggplot(data = diamonds,
aes(x = carat, y = price, color = cut, shape = cut)) +
geom_point(alpha=0.25,  ) +
xlab("Weights of the diamond (carat)") +
ylab("Price (USD")
ggplot(data = diamonds,
aes(x = carat, y = price, color = cut)) +
geom_point(alpha=0.25,  ) +
xlab("Weights of the diamond (carat)") +
ylab("Price (USD")
ggplot(data = msleep,
aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight") +
ylab("Total sleep time")
library(ggplot2)
ggplot(data = msleep,
aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight") +
ylab("Total sleep time")
ggplot(data = msleep,
aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight") +
ylab("Total sleep time") +
xlim(0,1.5)
ggplot(data = msleep,
aes(log(brainwt), sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight") +
ylab("Total sleep time") +
xlim(0,1.5)
ggplot(data = msleep,
aes(log(brainwt), sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight") +
ylab("Total sleep time")
ggplot(data = msleep,
aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight (logrithmic scale") +
ylab("Total sleep time")  +
scale_x_log10()
ggplot(data = msleep,
aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight (logrithmic scale") +
ylab("Total sleep time")  +
scale_x_log10()
ggplot(data = msleep,
aes(log(brainwt), sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight") +
ylab("Total sleep time")
ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain weight (logarithmic scale)") +
ylab("Total sleep time") +
scale_x_log10()
ggplot(data = msleep,
aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight (logrithmic scale)") +
ylab("Total sleep time")  +
scale_x_log10()
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point() +
xlab("Brain weight (logarithmic scale)") +
ylab("Total sleep time") +
scale_x_log10() +
facet_wrap(~vore)
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
xlab(" Carat") +
ylab("Price USD") +
facet_wrap( ~ cut)
boxplot(sleep_total ~ vore, data = msleep)
ggplot(msleep, aes(vore, sleep_total))+
geom_boxplot()
ggplot(data = diamonds,
aes(x = prices, y = cut)) +
geom_boxplot()
ggplot(data = diamonds,
aes(x = price, y = cut)) +
geom_boxplot()
? geom_boxplot
ggplot(data = diamonds,
aes(x = price, y = cut)) +
geom_boxplot() +
geom_jitter(width = 0.2)
? geom_boxplot
ggplot(data = diamonds,
aes(x = price, y = cut)) +
geom_boxplot(outlier.color = "red", outlier.shape = 1)
hist(msleep$sleep_total)
# ggplot
ggplot(data = msleep, aes(sleep_total))+
geom_histogram()
ggplot(diamonds, aes(price)) +
geom_histogram()
?geom_histogram
ggplot(diamonds, aes(price)) +
geom_histogram()+
facet_wrap(~cut)
ggplot(diamonds, aes(price)) +
geom_histogram(color = "black")+
facet_wrap(~cut)
barplot(table(msleep$vore))
geom_bar()
ggplot(msleep, aes(vore)) +
geom_bar()
ggplot(msleep, aes(factor(1), fill = vore))+
geom_bar()
ggplot(diamonds, aes(cut)) +
geom_bar()
ggplot(diamonds, aes(cut)) +
geom_bar(fill = c("red", "yelow", "green", "blue", "purple"))
ggplot(diamonds, aes(cut)) +
geom_bar(fill = c("red", "yellow", "green", "blue", "purple"))
ggplot(diamonds, aes(cut, fill = cut)) +
geom_bar()
ggplot(diamonds, aes(cut, fill = cut)) +
geom_bar(width = 0.5)
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar(width = 0.5)
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar(width = 0.5, position = "dodge")
ggplot(diamonds, aes(cut)) +
geom_bar() +
coord_flip()
myplot <- ggplot(diamonds, aes(cut)) +
geom_bar() +
coord_flip()
myplot
myplot + xlab(" New x Label")
myplot + xlab(" New x Label")
myplot
ggsave("filename.pdf", myplot, width = 5, height = 5)
dev.off()
myplot
library(ggplot2)
View(msleep)
head(msleep)
tail(msleep)
dim(msleep)
str(msleep)
names(msleep)
?msleep
# To include in environment
data("msleep")
force(msleep)
View(msleep)
View(msleep)
summary(msleep)
msleep$sleep_total
# mean
mean(msleep$sleep_total)
median(msleep$sleep_total)
max(msleep$sleep_total)
min(msleep$sleep_total)
sd(msleep$sleep_total)
var(msleep$sleep_total)
quantile(msleep$sleep_total)
sum(msleep$sleep_total >8)
?mean
mean(msleep$sleep_rem) # Why NA?
mean(msleep$sleep_rem, na.rm = TRUE) # Remove the NA
cor(msleep$sleep_total, msleep$sleep_rem)
?cor
cor(msleep$sleep_total, msleep$sleep_rem, use = "complete.obs")
table(msleep$vore)
proportions(table(msleep$vore))
table(msleep$vore, msleep$conservation)
proportions(table(msleep$vore,msleep$conservation), margin = 1)
proportions(table(msleep$vore,msleep$conservation), margin = 2)
?proportions
# Dataset Dimaonds
?diamonds
head(diamonds)
tail(diamonds)
dim(diamonds)
str(diamonds)
names(diamonds)
summary(diamonds)
# Base R
plot(msleep$sleep_total, msleep$sleep_rem) #Basic
ggplot(msleep, aes(x = sleep_total,
y = sleep_rem)) + geom_point()
ggplot(msleep, aes(x = sleep_total,
y = sleep_rem)) + geom_point()
plot(msleep$sleep_total, msleep$sleep_rem, pch = 16)
grid()
# Colors, shapes and axis labels
ggplot(msleep, aes(x = sleep_total,
y = sleep_rem)) +
geom_point() +
xlab("Total sleep time (h)") +
ylab("Rem Sleep in hours")
# Added color
ggplot(msleep, aes(x = sleep_total,
y = sleep_rem)) +
geom_point(colour = "red") +
xlab("Total sleep time (h)") +
ylab("Rem Sleep in hours")
colors()
# Added color
ggplot(msleep, aes(x = sleep_total,
y = sleep_rem)) +
geom_point(colour = "lightblue") +
xlab("Total sleep time (h)") +
ylab("Rem Sleep in hours")
ggplot(msleep, aes(x = sleep_total,
y = sleep_rem, colour = vore)) +
geom_point() +
xlab("Total sleep time (h)") +
ylab("Rem Sleep in hours")
ggplot(msleep, aes(x = sleep_total,
y = sleep_rem, colour = sleep_cycle)) +
geom_point() +
xlab("Total sleep time (h)") +
ylab("Rem Sleep in hours")
ggplot(data = diamonds,
aes(x = carat, y = price)) +
geom_point()
ggplot(data = diamonds,
aes(x = carat, y = price)) +
geom_point() +
xlab("Weights of the diamond (carat)") +
ylab("Price (USD")
ggplot(data = diamonds,
aes(x = carat, y = price)) +
geom_point(alpha=0.25) +
xlab("Weights of the diamond (carat)") +
ylab("Price (USD")
ggplot(data = diamonds,
aes(x = carat, y = price, color = cut)) +
geom_point(alpha=0.25,  ) +
xlab("Weights of the diamond (carat)") +
ylab("Price (USD")
ggplot(data = msleep,
aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight") +
ylab("Total sleep time") +
xlim(0,1.5)
ggplot(data = msleep,
aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight") +
ylab("Total sleep time")
ggplot(data = msleep,
aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight") +
ylab("Total sleep time") +
xlim(0,1.5)
ggplot(data = msleep,
aes(log(brainwt), sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight") +
ylab("Total sleep time")
ggplot(data = msleep,
aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain Weight (logrithmic scale)") +
ylab("Total sleep time")  +
scale_x_log10()
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point() +
xlab("Brain weight (logarithmic scale)") +
ylab("Total sleep time") +
scale_x_log10() +
facet_wrap(~vore)
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
xlab(" Carat") +
ylab("Price USD") +
facet_wrap( ~ cut)
boxplot(sleep_total ~ vore, data = msleep)
ggplot(msleep, aes(vore, sleep_total))+
geom_boxplot()
ggplot(data = diamonds,
aes(x = price, y = cut)) +
geom_boxplot(outlier.color = "red", outlier.shape = 1)
?geom_boxplot
# Base R
hist(msleep$sleep_total)
# ggplot
ggplot(data = msleep, aes(sleep_total))+
geom_histogram()
ggplot(diamonds, aes(price)) +
geom_histogram(color = "black")+
facet_wrap(~cut)
?geom_histogram
barplot(table(msleep$vore))
ggplot(msleep, aes(vore)) +
geom_bar()
ggplot(msleep, aes(factor(1), fill = vore))+
geom_bar()
ggplot(diamonds, aes(cut)) +
geom_bar(fill = c("red", "yellow", "green", "blue", "purple"))
# cut
ggplot(diamonds, aes(cut, fill = cut)) +
geom_bar()
ggplot(diamonds, aes(cut, fill = cut)) +
geom_bar(width = 0.5)
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar(width = 0.5)
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar(width = 0.5, position = "dodge")
ggplot(diamonds, aes(cut)) +
geom_bar() +
coord_flip()
myplot <- ggplot(diamonds, aes(cut)) +
geom_bar() +
coord_flip()
myplot
myplot + xlab(" New Label")
x <- 6
class(x)
class(y)
y <- "Scotland"
z <- TRUE
class(y)
class(z)
number <-c(6,9,12)
class(number)
all <- c(x,y,z)
class(all)
?WorldPhones
class(WorldPhones)
View(WorldPhones)
?airquality
class(airquality)
View(airquality)
?msleep
class(msleep)
View(msleep)
# Convert data structure to another
WorldPhones_DF <- as.data.frame(WorldPhones)
airquality_matrix -< as.matrix(airquality)
airquality_matrix <- as.matrix(airquality)
WorldPhones_DF
airquality_matrix
class(airquality_matrix)
a <- "A raniy data in london"
class(a)
a <- 'A raniy data in london'
class(a)
sum( 1+ 2, iL + 2, 1L + 2L)
sum( 1+ 2, 1L + 2, 1L + 2L)
b <- sum( 1+ 2, 1L + 2, 1L + 2L)
b
class(b)
"Hello" + 1
FALSE * 2
TRUE + 1
ncol(msleep)
nrow(msleep)
dim(msleep)
names((msleep))
names(msleep)
row.names(msleep)
x <- 1:6
x
matrix(x, nrow = 2, ncol = 3)
matrix(x, nrow = 3, ncol = 2)
matrix(x, nrow = 3, ncol = 2)
matrix(x, nrow = 3, ncol = 2)
matrix(x, nrow = 3, ncol = 2)
?airquality
?airquality
data("airquality")
# Extract the temp vector
airquality$Temp
mean(airquality$Temp)
names(airquality)
airquality[5,4]
airquality$Temp[5]
airquality[5,]
# Column
airquality[, 4]
airquality[[4]]
airquality[, c(2,4,6)]
airquality[, c("Temp", "Wind")]
airquality[, 3]
airquality[c(1:5), ]
cor(airquality[, 4], airquality[, 3])
airquality[, -c(3,4)]
data = airquality
data
head(data)
data$Solar.R[6]
data$Solar.R[6] <- 222
data$Solar.R[6]
head(data)
max(airquality$Temp)
# To find the hottest day
which.max(airquality$Temp)
airquality[120,]
# OR
airquality[which.max(airquality$Temp), ]
# Lowest temperature
airquality[which.min(airquality$Temp), ]
airquality[airquality$Temp > 90]
airquality[airquality$Temp > 90, ]
a <- 3; b <- 8
a ==b
a>b
a<b
a!=b
is.na(a)
a %in% c(1,4,9)
b %in% c(1,4,8)
which(airquality$Temp > 90)
all(airquality$temp > 90)
all(airquality$temp > 90)
all(airquality$Temp > 90)
any(airquality$Temp > 90)
# Count
sum(airquality$Temp > 90)
airquality#Temp > 90
airquality$Temp > 90
# To get Proportion
mean(airquality$Temp > 90)
a<b & a> 1
a<b & a ==4
a<b | a ==4
a==4 | a==5
xor(a<b, a==4)
which.min(airquality$Temp)
airquality[which.min(airquality$Temp),]
airquality$Wind > 17
sum(airquality$Wind > 17)
airquality[airquality$Wind > 17,]
sum(airquality$Ozone)
airquality$Ozone
is.na(airquality$Ozone)
sum(is.na(airquality$Ozone))
airquality$Temp < 70
airquality$Temp < 70 & airquality$Wind > 10
sum(airquality$Temp < 70 & airquality$Wind > 10)
?cut
cut(rep(1:5, 4))
cut(rep(1:5), 4)
# Importing CSV files
gwd()
# Importing CSV files
getwd()
setwd("C:/Users/NEXT/Desktop/Learning_R/Tutorials")
getwd() # Show Current working directory
read.csv("./Data/philosophers.csv")
read.csv("Data/philosophers.csv")
getwd() # Show Current working directory
read.csv("C:/Users/NEXT/Desktop/Learning_R/Tutorials/Data/philosophers.csv")
read.csv("C:/Users/NEXT/Desktop/Learning_R/Data/philosophers.csv")
read.csv("Data/philosophers.csv")
read.csv("/Data/philosophers.csv")
read.csv("./Data/philosophers.csv")
read.csv("C:/Users/NEXT/Desktop/Learning_R/Data/philosophers.csv")
data <- read.csv("C:/Users/NEXT/Desktop/Learning_R/Data/philosophers.csv")
data
View(data)
str(data)
read.csv(file.choose())
read.csv(file.choose())
data1<- read.csv(file.choose())
data1
data1<- read.csv(file.choose())
data1
data1
data1<- read.csv(file.choose())
bacteria <- read.csv("C:/Users/NEXT/Desktop/Learning_R/Data/bacteria.csv")
View(bacteria)
